import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { TikTokCrawlerService } from './tiktok-crawler.service';
import { TikTokPostingService } from './tiktok-posting.service';

@Injectable()
export class TikTokScheduler {
    private readonly logger = new Logger(TikTokScheduler.name);

    constructor(
        private crawlerService: TikTokCrawlerService,
        private postingService: TikTokPostingService,
    ) {}

    /**
     * Crawl video TikTok hot m·ªói 2 gi·ªù
     */
    @Cron('0 0 */2 * * *', {
        name: 'crawl-tiktok',
        timeZone: 'Asia/Ho_Chi_Minh',
    })
    async handleTikTokCrawling() {
        this.logger.log('üéµ Starting scheduled TikTok crawling...');
        try {
            const newVideos = await this.crawlerService.crawlHotVideosToday();
            this.logger.log(`‚úÖ TikTok crawl completed: ${newVideos} new videos`);
        } catch (error) {
            this.logger.error(`‚ùå Error in TikTok crawling: ${error.message}`);
        }
    }

    /**
     * ƒêƒÉng video TikTok hot nh·∫•t l√∫c 10h s√°ng, 3h chi·ªÅu, 8h t·ªëi
     */
    @Cron('0 0 10,15,20 * * *', {
        name: 'post-tiktok-hot',
        timeZone: 'Asia/Ho_Chi_Minh',
    })
    async handlePostHottestVideo() {
        this.logger.log('üé¨ Posting hottest TikTok video...');
        try {
            await this.postingService.postHottestVideo();
            this.logger.log('‚úÖ TikTok video posted successfully');
        } catch (error) {
            this.logger.error(`‚ùå Error posting TikTok video: ${error.message}`);
        }
    }

    /**
     * G·ª≠i t·ªïng h·ª£p TikTok l√∫c 9h t·ªëi m·ªói ng√†y
     */
    @Cron('0 0 21 * * *', {
        name: 'tiktok-daily-summary',
        timeZone: 'Asia/Ho_Chi_Minh',
    })
    async handleDailySummary() {
        this.logger.log('üìä Sending TikTok daily summary...');
        try {
            await this.postingService.sendDailySummary();
            this.logger.log('‚úÖ TikTok daily summary sent');
        } catch (error) {
            this.logger.error(`‚ùå Error sending summary: ${error.message}`);
        }
    }

    /**
     * Manual triggers
     */
    async triggerManualCrawl() {
        this.logger.log('üéµ Manual TikTok crawl triggered');
        return await this.crawlerService.crawlHotVideosToday();
    }

    async triggerManualPost() {
        this.logger.log('üé¨ Manual TikTok post triggered');
        await this.postingService.postHottestVideo();
    }
}

