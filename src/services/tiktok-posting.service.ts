import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { TikTokService } from './tiktok.service';
import { MezonClientService } from './mezon-client.service';

@Injectable()
export class TikTokPostingService {
    private readonly logger = new Logger(TikTokPostingService.name);

    constructor(
        private tiktokService: TikTokService,
        private mezonClient: MezonClientService,
        private configService: ConfigService,
    ) {}

    /**
     * ƒêƒÉng video TikTok hot nh·∫•t ch∆∞a ƒëƒÉng
     */
    async postHottestVideo(): Promise<void> {
        const channelId = this.configService.get<string>('TIKTOK_CHANNEL_ID');
        
        if (!channelId || channelId === 'your_channel_id_here') {
            this.logger.warn('‚ö†Ô∏è TIKTOK_CHANNEL_ID not configured, skipping post');
            return;
        }

        try {
            const video = await this.tiktokService.getHottestVideoToday();
            
            if (!video) {
                this.logger.log('üì≠ No unposted TikTok videos available');
                return;
            }

            this.logger.log(`üé¨ Posting hottest TikTok video: ${video.title}`);

            // Format message
            const messageContent = this.formatVideoMessage(video);

            // G·ª≠i message
            await this.mezonClient.sendMessage({
                channel_id: channelId,
                msg: {
                    t: messageContent,
                },
            });

            // ƒê√°nh d·∫•u ƒë√£ ƒëƒÉng
            await this.tiktokService.markAsPosted(video.videoId);

            this.logger.log(`‚úÖ Posted TikTok video: ${video.title}`);

        } catch (error) {
            this.logger.error(`Error posting TikTok video: ${error.message}`);
            throw error;
        }
    }

    /**
     * ƒêƒÉng top N video hot nh·∫•t
     */
    async postTopVideos(count: number = 5): Promise<number> {
        const channelId = this.configService.get<string>('TIKTOK_CHANNEL_ID');
        
        if (!channelId || channelId === 'your_channel_id_here') {
            this.logger.warn('‚ö†Ô∏è TIKTOK_CHANNEL_ID not configured');
            return 0;
        }

        try {
            const videos = await this.tiktokService.getUnpostedVideos(count);
            
            if (videos.length === 0) {
                this.logger.log('üì≠ No unposted TikTok videos');
                return 0;
            }

            this.logger.log(`üé¨ Posting ${videos.length} TikTok videos...`);

            let postedCount = 0;

            for (const video of videos) {
                try {
                    const messageContent = this.formatVideoMessage(video);
                    await this.mezonClient.sendMessage({
                        channel_id: channelId,
                        msg: {
                            t: messageContent,
                        },
                    });
                    await this.tiktokService.markAsPosted(video.videoId);
                    postedCount++;
                    
                    // Delay gi·ªØa c√°c post ƒë·ªÉ tr√°nh spam
                    await this.delay(2000);

                } catch (error) {
                    this.logger.error(`Error posting video ${video.videoId}: ${error.message}`);
                }
            }

            this.logger.log(`‚úÖ Posted ${postedCount}/${videos.length} TikTok videos`);
            return postedCount;

        } catch (error) {
            this.logger.error(`Error in postTopVideos: ${error.message}`);
            return 0;
        }
    }

    /**
     * G·ª≠i t·ªïng h·ª£p video hot trong ng√†y
     */
    async sendDailySummary(): Promise<void> {
        const channelId = this.configService.get<string>('TIKTOK_CHANNEL_ID');
        
        if (!channelId || channelId === 'your_channel_id_here') {
            return;
        }

        try {
            const stats = await this.tiktokService.getStats();
            const topVideos = await this.tiktokService.getUnpostedVideos(10);

            const currentTime = new Date().toLocaleString('vi-VN', {
                timeZone: 'Asia/Ho_Chi_Minh',
                dateStyle: 'full',
                timeStyle: 'short',
            });

            let message = `### üéµ TikTok Daily Summary - ${currentTime}\n\n`;
            message += `#### üìä Th·ªëng K√™:\n`;
            message += `‚Ä¢ T·ªïng video: ${stats.total}\n`;
            message += `‚Ä¢ Ch∆∞a ƒëƒÉng: ${stats.unposted}\n`;
            message += `‚Ä¢ ƒê√£ ƒëƒÉng: ${stats.posted}\n\n`;

            if (topVideos.length > 0) {
                message += `#### üî• Top ${topVideos.length} Video Hot Nh·∫•t:\n\n`;
                
                topVideos.forEach((video, index) => {
                    message += `##### ${index + 1}. ${video.title}\n`;
                    message += `üë§ @${video.authorUsername}\n`;
                    message += `‚ù§Ô∏è ${this.formatNumber(video.likeCount)} | `;
                    message += `üëÄ ${this.formatNumber(video.viewCount)} | `;
                    message += `üîó ${video.videoUrl}\n\n`;
                });
            } else {
                message += `üì≠ Ch∆∞a c√≥ video n√†o trong ng√†y\n`;
            }

            await this.mezonClient.sendMessage({
                channel_id: channelId,
                msg: {
                    t: message,
                },
            });

            this.logger.log('‚úÖ TikTok daily summary sent');

        } catch (error) {
            this.logger.error(`Error sending TikTok summary: ${error.message}`);
        }
    }

    /**
     * Format video message ƒë·ªÉ ƒëƒÉng
     */
    private formatVideoMessage(video: any): string {
        const title = video.title || 'Untitled Video';
        const author = video.authorDisplayName || video.authorUsername;
        
        let message = `### üî• Video TikTok Hot üéµ\n\n`;
        message += `#### üì± ${title}\n\n`;
        message += `üë§ T√°c gi·∫£: @${video.authorUsername} (${author})\n\n`;
        message += `#### üìä Th·ªëng K√™:\n`;
        message += `‚Ä¢ ‚ù§Ô∏è Like: ${this.formatNumber(video.likeCount)}\n`;
        message += `‚Ä¢ üëÄ View: ${this.formatNumber(video.viewCount)}\n`;
        message += `‚Ä¢ üîÑ Share: ${this.formatNumber(video.shareCount)}\n`;
        message += `‚Ä¢ üí¨ Comment: ${this.formatNumber(video.commentCount)}\n`;
        message += `‚Ä¢ üî• Hot Score: ${this.formatNumber(video.hotScore)}\n\n`;
        message += `#### üîó Link: ${video.videoUrl}\n`;

        return message;
    }

    /**
     * Format s·ªë l·ªõn (1000 -> 1K, 1000000 -> 1M)
     */
    private formatNumber(num: number): string {
        const n = Number(num);
        if (n >= 1000000) {
            return (n / 1000000).toFixed(1) + 'M';
        }
        if (n >= 1000) {
            return (n / 1000).toFixed(1) + 'K';
        }
        return n.toString();
    }

    /**
     * Delay helper
     */
    private delay(ms: number): Promise<void> {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

