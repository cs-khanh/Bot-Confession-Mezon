import { ChannelMessage } from 'mezon-sdk';
import { Command } from '@app/decorators/command.decorator';
import { CommandMessage } from '@app/command/common/command.abstract';
import { CommandStorage } from '@app/command/common/command.storage';

@Command('help', {
    description: 'Shows available commands and their usage',
    usage: '!help [command]',
    category: 'General',
    aliases: ['h', 'commands'],
})
export class HelpCommand extends CommandMessage {
    constructor() {
        super();
    }

    execute(args: string[], message: ChannelMessage) {
        if (args.length > 0) {
            // Show help for specific command
            const commandName = args[0].toLowerCase().replace('!', ''); // Remove ! prefix if included
            const metadata = CommandStorage.getCommandMetadata(commandName);
            
            if (!metadata) {
                const messageContent = `Kh√¥ng t√¨m th·∫•y l·ªánh '${commandName}'. S·ª≠ d·ª•ng !help ƒë·ªÉ xem t·∫•t c·∫£ c√°c l·ªánh c√≥ s·∫µn.`;
                return this.replyMessageGenerate({ messageContent }, message);
            }
            
            const messageContent = this.formatCommandHelp(metadata);
            return this.replyMessageGenerate({
                messageContent,
                mk: [{ type: 'pre', s: 0, e: messageContent.length }],
            }, message);
        }

        // Show all commands grouped by category
        const commandEntries = Array.from(CommandStorage.getAllCommands().entries());
        const categorizedCommands: Record<string, { name: string; description: string }[]> = {};
        
        // Group commands by category
        commandEntries.forEach(([name, metadata]) => {
            const category = metadata.category || 'Misc';
            if (!categorizedCommands[category]) {
                categorizedCommands[category] = [];
            }
            categorizedCommands[category].push({
                name,
                description: metadata.description || 'No description'
            });
        });
        
        // Format message with categories
        let messageContent = `### ü§ñ BOT CONFESSION MEZON - DANH S√ÅCH L·ªÜNH\n\n`;
        
        // Add description for the bot
        messageContent += `Bot Confession Mezon cho ph√©p b·∫°n g·ª≠i confession ·∫©n danh, ƒëƒÉng tin t·ª©c t·ª± ƒë·ªông v√† nhi·ªÅu t√≠nh nƒÉng kh√°c.\n`;
        messageContent += `S·ª≠ d·ª•ng \`!help [l·ªánh]\` ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt v·ªÅ l·ªánh c·ª• th·ªÉ.\n\n`;
        
        // Add each category and its commands
        Object.keys(categorizedCommands).sort().forEach(category => {
            messageContent += `#### ${category}\n`;
            categorizedCommands[category].forEach(cmd => {
                messageContent += `‚Ä¢ \`!${cmd.name}\` - ${cmd.description}\n`;
            });
            messageContent += '\n';
        });
        
        // Add l∆∞u √Ω quan tr·ªçng v·ªÅ l·ªánh check join
        messageContent += `### ‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng\n`;
        messageContent += `‚Ä¢ N·∫øu v·ª´a c√†i ƒë·∫∑t bot, h√£y ch·∫°y \`!check join\` ƒë·ªÉ bot c√≥ th·ªÉ ƒëƒÉng tin v√†o c√°c channel\n`;
        messageContent += `‚Ä¢ Ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng: \`!confess\`, \`!help\`, \`!about\`, \`!ping\`\n`;
        messageContent += `‚Ä¢ C√°c l·ªánh kh√°c ch·ªâ d√†nh cho qu·∫£n tr·ªã vi√™n (admin)\n\n`;
        
        // Add usage examples
        messageContent += `### üìù V√≠ d·ª• s·ª≠ d·ª•ng\n`;
        
        // L·ªánh cho ng∆∞·ªùi d√πng th∆∞·ªùng
        messageContent += `#### L·ªánh cho ng∆∞·ªùi d√πng th∆∞·ªùng\n`;
        messageContent += `‚Ä¢ \`!confess T√¥i th√≠ch m·ªôt ng∆∞·ªùi trong l·ªõp nh∆∞ng kh√¥ng d√°m n√≥i\` - G·ª≠i confession ·∫©n danh\n`;
        messageContent += `‚Ä¢ \`!help [l·ªánh]\` - Xem h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng\n`;
        messageContent += `‚Ä¢ \`!about\` - Xem th√¥ng tin v·ªÅ bot\n`;
        messageContent += `‚Ä¢ \`!ping\` - Ki·ªÉm tra bot c√≥ ho·∫°t ƒë·ªông kh√¥ng\n\n`;
        
        // L·ªánh cho admin - Confession
        messageContent += `#### L·ªánh qu·∫£n l√Ω Confession (Admin)\n`;
        messageContent += `‚Ä¢ \`!approve [ID]\` - Duy·ªát confession\n`;
        messageContent += `‚Ä¢ \`!reject [ID] [l√Ω do]\` - T·ª´ ch·ªëi confession\n`;
        messageContent += `‚Ä¢ \`!topconfession\` - Xem confession n·ªïi b·∫≠t\n`;
        messageContent += `‚Ä¢ \`!stats\` - Xem th·ªëng k√™ confession theo tu·∫ßn\n\n`;
        
        // L·ªánh cho admin - Tin t·ª©c
        messageContent += `#### L·ªánh qu·∫£n l√Ω Tin t·ª©c (Admin)\n`;
        messageContent += `‚Ä¢ \`!news crawl\` - Crawl tin t·ª©c ngay l·∫≠p t·ª©c\n`;
        messageContent += `‚Ä¢ \`!news post\` - ƒêƒÉng tin t·ª©c ch∆∞a ƒëƒÉng\n`;
        messageContent += `‚Ä¢ \`!news status\` - Xem th·ªëng k√™ tin t·ª©c\n\n`;
        
        // L·ªánh cho admin - TikTok
        messageContent += `#### L·ªánh qu·∫£n l√Ω TikTok (Admin)\n`;
        messageContent += `‚Ä¢ \`!tiktok trending\` - Xem video TikTok th·ªãnh h√†nh\n`;
        messageContent += `‚Ä¢ \`!tiktok search m√®o h√†i h∆∞·ªõc\` - T√¨m video TikTok\n\n`;
        
        // L·ªánh cho admin - Ki·ªÉm tra
        messageContent += `#### L·ªánh ki·ªÉm tra h·ªá th·ªëng (Admin)\n`;
        messageContent += `‚Ä¢ \`!check join\` - Bot tham gia v√†o c√°c channel (‚ö†Ô∏è Quan tr·ªçng!)\n`;
        messageContent += `‚Ä¢ \`!check channels\` - Ki·ªÉm tra quy·ªÅn truy c·∫≠p channel\n\n`;
        
        // Add note about hashtags
        messageContent += `**Ghi ch√∫:** B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng hashtag trong confession ƒë·ªÉ ph√¢n lo·∫°i: \`!confess T√¥i r·∫•t vui h√¥m nay #h·∫°nh_ph√∫c\`\n`;
        messageContent += `---------------------------------------------\n`;
            
        return this.replyMessageGenerate({
            messageContent,
            mk: [{ type: 'pre', s: 0, e: messageContent.length }],
        }, message);
    }

    private formatCommandHelp(metadata: any): string {
        let helpText = [
            `### üìö Tr·ª£ gi√∫p l·ªánh: ${metadata.name}`,
            `**M√¥ t·∫£:** ${metadata.description}`,
            `**C√°ch s·ª≠ d·ª•ng:** ${metadata.usage}`,
            `**Nh√≥m:** ${metadata.category}`,
            metadata.aliases?.length ? `**L·ªánh thay th·∫ø:** ${metadata.aliases.join(', ')}` : '',
            metadata.permissions?.length ? `**‚ö†Ô∏è Quy·ªÅn h·∫°n c·∫ßn thi·∫øt:** ${metadata.permissions.includes('admin') ? 'Ch·ªâ d√†nh cho qu·∫£n tr·ªã vi√™n (admin)' : metadata.permissions.join(', ')}` : '**üîì Quy·ªÅn h·∫°n:** T·∫•t c·∫£ ng∆∞·ªùi d√πng ƒë·ªÅu c√≥ th·ªÉ s·ª≠ d·ª•ng',
        ].filter(Boolean).join('\n');
        
        // Add specific additional help for common commands
        switch (metadata.name) {
            case 'confess':
                helpText += '\n\n**Chi ti·∫øt:**\n';
                helpText += 'G·ª≠i confession ·∫©n danh ƒë·ªÉ ki·ªÉm duy·ªát. N·∫øu ƒë∆∞·ª£c ph√™ duy·ªát, confession s·∫Ω ƒë∆∞·ª£c ƒëƒÉng l√™n k√™nh confessions.\n\n';
                helpText += '**Quy t·∫Øc:** Kh√¥ng g·ª≠i n·ªôi dung vi ph·∫°m quy t·∫Øc c·ªông ƒë·ªìng nh∆∞ spam, qu·∫•y r·ªëi, ho·∫∑c th√¥ng tin c√° nh√¢n.\n\n';
                helpText += '**S·ª≠ d·ª•ng hashtag:** B·∫°n c√≥ th·ªÉ th√™m hashtag v√†o confession ƒë·ªÉ ph√¢n lo·∫°i: `!confess T√¥i th√≠ch m·ªôt ng∆∞·ªùi #t√¨nh_c·∫£m`\n\n';
                helpText += '**V√≠ d·ª•:**\n';
                helpText += '`!confess T√¥i ƒë√£ v∆∞·ª£t qua k·ª≥ thi kh√≥ khƒÉn nh·∫•t! #vui_m·ª´ng`\n';
                helpText += '`!cf T√¥i th√≠ch m·ªôt ng∆∞·ªùi trong l·ªõp nh∆∞ng kh√¥ng d√°m n√≥i.`';
                helpText += '--------------------------------------------';
                break;
                
            case 'approve':
                helpText += '\n\n**Chi ti·∫øt:**\n';
                helpText += 'D√†nh cho qu·∫£n tr·ªã vi√™n ƒë·ªÉ ph√™ duy·ªát m·ªôt confession ƒëang ch·ªù x√©t duy·ªát.\n\n';
                helpText += '**Tham s·ªë:**\n';
                helpText += '- `confession_id`: ID c·ªßa confession (c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß ho·∫∑c 8 k√Ω t·ª± ƒë·∫ßu)\n';
                helpText += '- `optional_comment`: Nh·∫≠n x√©t t√πy ch·ªçn k√®m theo vi·ªác ph√™ duy·ªát\n\n';
                helpText += '**V√≠ d·ª•:**\n';
                helpText += '`!approve e269d914`\n';
                helpText += '`!approve e269d914-8032-4675-a6a8-39519e83b5ed Confession hay!`';
                helpText += '--------------------------------------------';
                break;
                
            case 'reject':
                helpText += '\n\n**Chi ti·∫øt:**\n';
                helpText += 'D√†nh cho qu·∫£n tr·ªã vi√™n ƒë·ªÉ t·ª´ ch·ªëi m·ªôt confession ƒëang ch·ªù x√©t duy·ªát.\n\n';
                helpText += '**Tham s·ªë:**\n';
                helpText += '- `confession_id`: ID c·ªßa confession (c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß ho·∫∑c 8 k√Ω t·ª± ƒë·∫ßu)\n';
                helpText += '- `reason`: L√Ω do t·ª´ ch·ªëi (s·∫Ω ƒë∆∞·ª£c l∆∞u l·∫°i)\n\n';
                helpText += '**V√≠ d·ª•:**\n';
                helpText += '`!reject e269d914 Vi ph·∫°m quy t·∫Øc c·ªông ƒë·ªìng`\n';
                helpText += '`!reject e269d914 N·ªôi dung kh√¥ng ph√π h·ª£p v·ªõi quy ƒë·ªãnh k√™nh`';
                helpText += '--------------------------------------------';
                break;
                
            case 'stats':
                helpText += '\n\n**Chi ti·∫øt:**\n';
                helpText += 'Hi·ªÉn th·ªã th·ªëng k√™ v·ªÅ c√°c confession theo tu·∫ßn.\n\n';
                helpText += '**Tham s·ªë (t√πy ch·ªçn):**\n';
                helpText += '- `week`: S·ªë tu·∫ßn (1-52)\n';
                helpText += '- `year`: NƒÉm\n\n';
                helpText += '**V√≠ d·ª•:**\n';
                helpText += '`!stats` (hi·ªÉn th·ªã th·ªëng k√™ tu·∫ßn hi·ªán t·∫°i)\n';
                helpText += '`!stats 41 2025` (hi·ªÉn th·ªã th·ªëng k√™ tu·∫ßn 41 nƒÉm 2025)';
                helpText += '--------------------------------------------';
                break;
                
            case 'topconfession':
                helpText += '\n\n**Chi ti·∫øt:**\n';
                helpText += 'Hi·ªÉn th·ªã danh s√°ch c√°c confession c√≥ nhi·ªÅu ph·∫£n ·ª©ng (reaction) nh·∫•t.\n\n';
                helpText += '**Tham s·ªë (t√πy ch·ªçn):**\n';
                helpText += '- `count`: S·ªë l∆∞·ª£ng confession mu·ªën hi·ªÉn th·ªã (m·∫∑c ƒë·ªãnh: 5)\n\n';
                helpText += '**V√≠ d·ª•:**\n';
                helpText += '`!topconfession` (hi·ªÉn th·ªã top 5 confession)\n';
                helpText += '`!topconfession 10` (hi·ªÉn th·ªã top 10 confession)';
                helpText += '--------------------------------------------';
                break;
                
            case 'news':
                helpText += '\n\n**Chi ti·∫øt:**\n';
                helpText += 'Qu·∫£n l√Ω t√≠nh nƒÉng tin t·ª©c c·ªßa bot. Bao g·ªìm c√°c thao t√°c crawl, ƒëƒÉng tin v√† xem th·ªëng k√™.\n\n';
                helpText += '**L·ªánh ph·ª•:**\n';
                helpText += '- `crawl`: Crawl tin t·ª©c ngay l·∫≠p t·ª©c\n';
                helpText += '- `post`: ƒêƒÉng c√°c tin ƒë√£ crawl nh∆∞ng ch∆∞a ƒëƒÉng\n';
                helpText += '- `status`: Xem th·ªëng k√™ v·ªÅ tin t·ª©c\n\n';
                helpText += '**V√≠ d·ª•:**\n';
                helpText += '`!news crawl` (crawl tin t·ª©c ngay)\n';
                helpText += '`!news post` (ƒëƒÉng tin t·ª©c ch∆∞a ƒëƒÉng)\n';
                helpText += '`!news status` (xem th·ªëng k√™ tin t·ª©c)\n\n';
                helpText += '**‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:**\n';
                helpText += 'Tr∆∞·ªõc khi s·ª≠ d·ª•ng l·ªánh `!news post` l·∫ßn ƒë·∫ßu ti√™n, h√£y ch·∫°y l·ªánh `!check join` ƒë·ªÉ bot tham gia v√†o c√°c channel ƒë√£ c·∫•u h√¨nh.';
                helpText += '--------------------------------------------';
                break;
                
            case 'tiktok':
                helpText += '\n\n**Chi ti·∫øt:**\n';
                helpText += 'T√¨m ki·∫øm v√† hi·ªÉn th·ªã video TikTok th·ªãnh h√†nh.\n\n';
                helpText += '**L·ªánh ph·ª•:**\n';
                helpText += '- `trending`: Hi·ªÉn th·ªã c√°c video th·ªãnh h√†nh\n';
                helpText += '- `search <t·ª´ kh√≥a>`: T√¨m ki·∫øm video theo t·ª´ kh√≥a\n\n';
                helpText += '**V√≠ d·ª•:**\n';
                helpText += '`!tiktok trending` (xem video th·ªãnh h√†nh)\n';
                helpText += '`!tiktok search m√®o h√†i h∆∞·ªõc` (t√¨m video v·ªÅ m√®o h√†i h∆∞·ªõc)';
                helpText += '--------------------------------------------';
                break;
                
            case 'check':
                helpText += '\n\n**Chi ti·∫øt:**\n';
                helpText += 'Ki·ªÉm tra v√† qu·∫£n l√Ω quy·ªÅn truy c·∫≠p channel c·ªßa bot.\n\n';
                helpText += '**L·ªánh ph·ª•:**\n';
                helpText += '- `join`: Bot tham gia v√†o t·∫•t c·∫£ c√°c channel ƒë√£ c·∫•u h√¨nh (‚ö†Ô∏è Quan tr·ªçng)\n';
                helpText += '- `channels`: Ki·ªÉm tra quy·ªÅn truy c·∫≠p v√†o c√°c channel\n\n';
                helpText += '**V√≠ d·ª•:**\n';
                helpText += '`!check join` (bot tham gia v√†o t·∫•t c·∫£ c√°c channel)\n';
                helpText += '`!check channels` (ki·ªÉm tra quy·ªÅn truy c·∫≠p)\n\n';
                helpText += '**‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:**\n';
                helpText += 'L·ªánh `!check join` ph·∫£i ƒë∆∞·ª£c ch·∫°y khi m·ªõi c√†i ƒë·∫∑t bot ho·∫∑c th√™m channel m·ªõi.';
                helpText += '--------------------------------------------';
                break;
        }
        
        return helpText;
    }
}