import { CommandMessage } from '@app/command/common/command.abstract';
import { Command } from '@app/decorators/command.decorator';
import { NewsScheduler } from '@app/services/news-scheduler.service';
import { NewsService } from '@app/services/news.service';
import { ChannelMessage } from 'mezon-sdk';
import { Injectable } from '@nestjs/common';

@Command('news', {
    description: 'Qu·∫£n l√Ω tin t·ª©c',
    usage: '!news <crawl|post|status>',
    category: 'News',
    permissions: ['admin'],
})
@Injectable()
export class NewsCommand extends CommandMessage {
    constructor(
        private newsScheduler: NewsScheduler,
        private newsService: NewsService,
    ) {
        super();
    }

    async execute(args: string[], message: ChannelMessage) {
        const subCommand = args[0]?.toLowerCase();

        switch (subCommand) {
            case 'crawl':
                return await this.handleCrawl(message);
            case 'post':
                return await this.handlePost(message);
            case 'status':
                return await this.handleStatus(message);
            default:
                return this.replyMessageGenerate(
                    {
                        messageContent: `### üì∞ L·ªánh Tin T·ª©c\n\n` +
                            `#### C√°ch d√πng:\n` +
                            `‚Ä¢ \`!news crawl\` - Crawl tin t·ª©c ngay\n` +
                            `‚Ä¢ \`!news post\` - ƒêƒÉng tin t·ª©c ch∆∞a post\n` +
                            `‚Ä¢ \`!news status\` - Xem th·ªëng k√™ tin t·ª©c\n\n` +
                            `#### L·ªãch t·ª± ƒë·ªông:\n` +
                            `‚Ä¢ Crawl: M·ªói 30 ph√∫t\n` +
                            `‚Ä¢ Post: 8h s√°ng, 12h tr∆∞a, 4h chi·ªÅu\n` +
                            `‚Ä¢ T·ªïng h·ª£p: 8h s√°ng & 6h chi·ªÅu\n` +
                            `‚Ä¢ D·ªçn d·∫πp: 2h s√°ng h√†ng ng√†y`,
                    },
                    message,
                );
        }
    }

    private async handleCrawl(message: ChannelMessage) {
        try {
            await this.replyMessageGenerate(
                {
                    messageContent: 'üîÑ ƒêang crawl tin t·ª©c t·ª´ c√°c ngu·ªìn...',
                },
                message,
            );

            await this.newsScheduler.triggerManualCrawl();

            const unpostedCount = await this.newsService.getUnpostedNews(1000);

            return this.replyMessageGenerate(
                {
                    messageContent: `### ‚úÖ Crawl ho√†n t·∫•t!\n\n` +
                        `üì∞ Tin ch∆∞a ƒëƒÉng: ${unpostedCount.length} b√†i`,
                },
                message,
            );
        } catch (error) {
            return this.replyMessageGenerate(
                {
                    messageContent: `‚ùå L·ªói khi crawl tin: ${error.message}`,
                },
                message,
            );
        }
    }

    private async handlePost(message: ChannelMessage) {
        try {
            const unpostedBefore = await this.newsService.getUnpostedNews(1000);

            await this.replyMessageGenerate(
                {
                    messageContent: `üì§ ƒêang ƒëƒÉng ${unpostedBefore.length} tin t·ª©c...`,
                },
                message,
            );

            await this.newsScheduler.triggerManualPost();

            const unpostedAfter = await this.newsService.getUnpostedNews(1000);
            const posted = unpostedBefore.length - unpostedAfter.length;

            let responseMessage = `### ‚úÖ ƒêƒÉng tin ho√†n t·∫•t!\n\n` +
                `üìù ƒê√£ ƒëƒÉng: ${posted} b√†i\n` +
                `üì∞ C√≤n l·∫°i: ${unpostedAfter.length} b√†i`;
                
            // N·∫øu kh√¥ng c√≥ b√†i n√†o ƒë∆∞·ª£c ƒëƒÉng, c√≥ th·ªÉ l√† v·∫•n ƒë·ªÅ quy·ªÅn truy c·∫≠p channel
            if (posted === 0 && unpostedBefore.length > 0) {
                responseMessage += `\n\n‚ö†Ô∏è **L∆∞u √Ω**: Kh√¥ng c√≥ b√†i n√†o ƒë∆∞·ª£c ƒëƒÉng th√†nh c√¥ng. C√≥ th·ªÉ bot ch∆∞a tham gia v√†o c√°c channel.\n`;
                responseMessage += `H√£y th·ª≠ s·ª≠ d·ª•ng l·ªánh \`!check join\` ƒë·ªÉ bot tham gia v√†o c√°c channel v√† th·ª≠ l·∫°i.`;
            }

            return this.replyMessageGenerate(
                {
                    messageContent: responseMessage,
                },
                message,
            );
        } catch (error) {
            return this.replyMessageGenerate(
                {
                    messageContent: `‚ùå L·ªói khi ƒëƒÉng tin: ${error.message}\n\n` +
                        `N·∫øu l·ªói li√™n quan ƒë·∫øn vi·ªác kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn v√†o channel, ` +
                        `h√£y th·ª≠ s·ª≠ d·ª•ng l·ªánh \`!check join\` ƒë·ªÉ bot tham gia v√†o c√°c channel v√† th·ª≠ l·∫°i.`,
                },
                message,
            );
        }
    }

    private async handleStatus(message: ChannelMessage) {
        try {
            const categories = await this.newsService.getAllCategories();
            const unposted = await this.newsService.getUnpostedNews(1000);

            let statusMessage = `### üìä Th·ªëng K√™ Tin T·ª©c\n\n`;
            statusMessage += `üì∞ T·ªïng tin ch∆∞a ƒëƒÉng: ${unposted.length} b√†i\n\n`;
            statusMessage += `#### Ph√¢n lo·∫°i theo ch·ªß ƒë·ªÅ:\n`;

            for (const category of categories) {
                const categoryNews = await this.newsService.getUnpostedNewsByCategory(category, 1000);
                if (categoryNews.length > 0) {
                    statusMessage += `‚Ä¢ ${category}: ${categoryNews.length} b√†i\n`;
                }
            }

            return this.replyMessageGenerate(
                {
                    messageContent: statusMessage,
                },
                message,
            );
        } catch (error) {
            return this.replyMessageGenerate(
                {
                    messageContent: `‚ùå L·ªói khi l·∫•y th·ªëng k√™: ${error.message}`,
                },
                message,
            );
        }
    }
}

